@OneToMany(mappedBy ="user", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JsonIgnore
	private List<StudentEnqEntity> enquiries;

=============================================================

@ManyToOne
	@JoinColumn(name="user_id")
	private UserDtlsEntity user;

======================================================================================
CRUD Repository & JPA Repository Provided Predefined methods To Performs DB Operations
CRUD Repo : provided methods to perform only crud operations
JPA Repo:   provided methods to perform crud + pagination + sorting operations
=======================================================================================
19-02-2024
-----------
Unidirectional One To Many:
                            //one user can have many items
                            @OneToMany(cascade = CascadeType.ALL)
	                    @JoinColumn(name="cid_fk",referencedColumnName = "cid")
	                    private List<ItemEntity> items;

json data to give in postman:

{
    "name": "Doe",
    "items": [
        {
            "itemName": "Dosa",
            "price": 5.99
        },
        {
            "itemName": "Idli",
            "price": 4.99
        },
        {
            "itemName": "Vada",
            "price": 3.99
        }
    ]
}
-----------------------------------------------------------------------------------------------
20-02-2021
-----------
Many To One Unidirectional:

 
     @ManyToOne(cascade = CascadeType.ALL)
     @JoinColumn(name = "cid")
     private CustomerEntity customer;
	


json data to give in postman:
============================

[
    {
        "itemName": "Item 1",
        "price":20.22,
        "customer": {
            "cid": 1
        }
    },
    {
        "itemName": "Item 2",
         "price":33.02,
        "customer": {
            "cid": 1
        }
    }
]

