@OneToMany(mappedBy ="user", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JsonIgnore
	private List<StudentEnqEntity> enquiries;

=============================================================

@ManyToOne
	@JoinColumn(name="user_id")
	private UserDtlsEntity user;

======================================================================================
CRUD Repository & JPA Repository Provided Predefined methods To Performs DB Operations
CRUD Repo : provided methods to perform only crud operations
JPA Repo:   provided methods to perform crud + pagination + sorting operations
=======================================================================================
19-02-2024
-----------
Unidirectional One To Many:
                            //one user can have many items
                            @OneToMany(cascade = CascadeType.ALL)
	                    @JoinColumn(name="cid_fk",referencedColumnName = "cid")
	                    private List<ItemEntity> items;

json data to give in postman:

{
    "name": "Doe",
    "items": [
        {
            "itemName": "Dosa",
            "price": 5.99
        },
        {
            "itemName": "Idli",
            "price": 4.99
        },
        {
            "itemName": "Vada",
            "price": 3.99
        }
    ]
}
-----------------------------------------------------------------------------------------------
20-02-2021
-----------
Many To One Unidirectional:

 
     @ManyToOne(cascade = CascadeType.ALL)
     @JoinColumn(name = "cid")
     private CustomerEntity customer;
	


json data to give in postman:
============================

[
    {
        "itemName": "Item 1",
        "price":20.22,
        "customer": {
            "cid": 1
        }
    },
    {
        "itemName": "Item 2",
         "price":33.02,
        "customer": {
            "cid": 1
        }
    }
]
------------------------------------------------------------------------------------------------

04-3-2024
----------

@NamedQuery is used to define static named queries within entity classes, while

@Query is used to define dynamic queries directly in repository interfaces or methods.


6-03-2024
==========
CustomerEntity:
---------------
From Customer Side(one customer can have many items) POST(localhost:1111/customer/1/items)
Note: we are passing one by one item to save

// one to many bi-directional
	@OneToMany(cascade = CascadeType.ALL,mappedBy = "customer")
	//@JsonIgnore
        private List<ItemEntity> items;

Json Data:
           {
             "itemName": "Item 3",
             "price": 20.99
          }

--------------------------------------------------------------------------------------------
ItemsEntity:
------------
       //many to one bi-directional
	@ManyToOne
	@JoinColumn(name="customer_id")
	@JsonIgnore
	private CustomerEntity customer;


From Items Side: Note: i have given list of items at a time

Json For Many To One(Many Items Can Have One Customer) POST(url:localhost:1111/items/save/1)
====================================================== --------------------------------------
[
  {
    "itemName": "Item 1",
    "price": 10.99
  },
  {
    "itemName": "Item 2",
    "price": 15.99
  },
  {
    "itemName": "Item 3",
    "price": 20.99
  }
]

-------------------------------------------------------------------------------------------















